@model List<MVCRestaurante.Models.VwPedidoActivo>

<div class="container" style="padding-top: 150px; padding-bottom: 150px;">
    <h2 class="mb-4 text-center">📌 Pedidos Activos</h2>

    @if (!Model.Any())
    {
        <p class="text-center">No hay pedidos activos.</p>
    }
    else
    {
        <!-- AGRUPAMOS PEDIDOS POR FECHA Y ORDENAMOS DESCENDENTE (LOS MÁS RECIENTES PRIMERO) -->
        @foreach (var group in Model
       .GroupBy(p => p.FechaPedido.Date)
       .OrderByDescending(g => g.Key))
        {
            <div class="mt-4 mb-2">
                <h4 style="font-weight: bold;">
                    @group.Key.ToShortDateString()
                </h4>
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle pedidos-table">
                    <thead class="table-dark">
                        <tr>
                            <th>ID Pedido (Teléfono)</th>
                            <th>Cliente</th>
                            <th>Tipo</th>
                            <th>Estado</th>
                            <th>Hora</th>
                            <th>Total</th>
                            <th>Completar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pedido in group.OrderBy(p => p.Estado == "ENTREGADO").ThenBy(p => p.HoraPedido))
                        {
                            <!-- SI EL PEDIDO ESTÁ ENTREGADO, SE RESALTA EN VERDE -->
                            <tr id="pedido-@pedido.IdPedido" style="@(pedido.Estado == "ENTREGADO" ? "background-color: #d4edda;" : "")">
                                <td>
                                    <strong>@pedido.IdPedido</strong>
                                    <span style="margin-left: 8px;">
                                        (tel: <strong>@pedido.Telefono</strong>)
                                    </span>
                                </td>

                                <td>@pedido.Nombre</td>

                                <td>
                                    @if (pedido.TipoPedido == "DOMICILIO")
                                    {
                                        <span class="badge bg-info text-dark">@pedido.TipoPedido</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success text-dark">@pedido.TipoPedido</span>
                                    }
                                </td>

                                <td>
                                    <span class="badge @(pedido.Estado == "PENDIENTE" ? "bg-warning" : pedido.Estado == "CANCELADO" ? "bg-danger" : "bg-success")">
                                        @pedido.Estado
                                    </span>
                                </td>

                                <td>@pedido.HoraPedido.ToString(@"hh\:mm\:ss")</td>

                                <td>€ @pedido.PrecioTotal</td>

                                <td>
                                    <input type="checkbox" class="completar-pedido" data-id="@pedido.IdPedido"
                                    @(pedido.Estado == "ENTREGADO" ? "checked" : "") />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".completar-pedido").forEach(checkbox => {
            checkbox.addEventListener("change", function () {
                let pedidoId = this.dataset.id;
                let completado = this.checked;

                fetch(`/Carrito/MarcarPedidoComoCompletado?id=${pedidoId}&completado=${completado}`, {
                    method: "POST"
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        let row = document.getElementById(`pedido-${data.id}`);
                        let estadoBadge = row.querySelector("td:nth-child(4) span");
                        let tbody = row.closest("tbody"); // Obtener el grupo actual

                        // Actualizar visualmente la fila
                        if (data.estado === "ENTREGADO") {
                            row.style.backgroundColor = "#d4edda"; // Verde suave
                            estadoBadge.textContent = "ENTREGADO";
                            estadoBadge.className = "badge bg-success";
                        } else {
                            row.style.backgroundColor = "";
                            estadoBadge.textContent = "PENDIENTE";
                            estadoBadge.className = "badge bg-warning";
                        }

                        // Reordenar la tabla dentro del mismo grupo
                        reordenarFilas(tbody, row, data.estado, data.horaPedido);
                    } else {
                        console.error("Error al actualizar el pedido");
                    }
                })
                .catch(error => console.error("Error:", error));
            });
        });

        function reordenarFilas(tbody, row, estado, horaPedido) {
            let filas = Array.from(tbody.children);
            filas = filas.filter(f => f !== row);

            // Si el pedido está entregado, se mueve al final del grupo del mismo día
            if (estado === "ENTREGADO") {
                filas.push(row);
            } else {
                // Si vuelve a "PENDIENTE", lo volvemos a ordenar por hora
                filas.push(row);
                filas.sort((a, b) => {
                    let horaA = a.querySelector("td:nth-child(5)").textContent.trim();
                    let horaB = b.querySelector("td:nth-child(5)").textContent.trim();
                    return horaA.localeCompare(horaB);
                });
            }

            // Limpiar y reinsertar las filas en el nuevo orden
            tbody.innerHTML = "";
            filas.forEach(fila => tbody.appendChild(fila));
        }
    });
</script>
